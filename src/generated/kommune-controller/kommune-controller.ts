/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { KommuneResponse } from ".././model";
import { customFetch } from "../../custom-fetch";
import type { ErrorType } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getHentKommuneInfoUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/kommune`;
};

export const hentKommuneInfo = async (fiksDigisosId: string, options?: RequestInit): Promise<KommuneResponse> => {
    return customFetch<Promise<KommuneResponse>>(getHentKommuneInfoUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getHentKommuneInfoQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/kommune`] as const;
};

export const getHentKommuneInfoQueryOptions = <
    TData = Awaited<ReturnType<typeof hentKommuneInfo>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentKommuneInfoQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentKommuneInfo>>> = ({ signal }) =>
        hentKommuneInfo(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof hentKommuneInfo>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type HentKommuneInfoQueryResult = NonNullable<Awaited<ReturnType<typeof hentKommuneInfo>>>;
export type HentKommuneInfoQueryError = ErrorType<unknown>;

export function useHentKommuneInfo<TData = Awaited<ReturnType<typeof hentKommuneInfo>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentKommuneInfo<TData = Awaited<ReturnType<typeof hentKommuneInfo>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentKommuneInfo<TData = Awaited<ReturnType<typeof hentKommuneInfo>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHentKommuneInfo<TData = Awaited<ReturnType<typeof hentKommuneInfo>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentKommuneInfo>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getHentKommuneInfoQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
