/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {TilgangResponse} from ".././model";

export const getHarTilgangUrl = () => {
    return `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/tilgang`;
};

export const harTilgang = async (options?: RequestInit): Promise<TilgangResponse> => {
    const res = await fetch(getHarTilgangUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as TilgangResponse;
};

export const getHarTilgangQueryKey = () => {
    return [`https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/tilgang`] as const;
};

export const getHarTilgangQueryOptions = <TData = Awaited<ReturnType<typeof harTilgang>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>>;
    fetch?: RequestInit;
}) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHarTilgangQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof harTilgang>>> = ({signal}) =>
        harTilgang({signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof harTilgang>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HarTilgangQueryResult = NonNullable<Awaited<ReturnType<typeof harTilgang>>>;
export type HarTilgangQueryError = unknown;

export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = unknown>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>, "initialData">;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>, "initialData">;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHarTilgangQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
