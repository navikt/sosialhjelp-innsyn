/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { TilgangResponse } from ".././model";
import { customFetch } from "../../custom-fetch";
import type { ErrorType } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export type harTilgangResponse = {
    data: TilgangResponse;
    status: number;
};

export const getHarTilgangUrl = () => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/tilgang`;
};

export const harTilgang = async (options?: RequestInit): Promise<harTilgangResponse> => {
    return customFetch<Promise<harTilgangResponse>>(getHarTilgangUrl(), {
        ...options,
        method: "GET",
    });
};

export const getHarTilgangQueryKey = () => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/tilgang`] as const;
};

export const getHarTilgangQueryOptions = <
    TData = Awaited<ReturnType<typeof harTilgang>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHarTilgangQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof harTilgang>>> = ({ signal }) =>
        harTilgang({ signal, ...requestOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof harTilgang>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type HarTilgangQueryResult = NonNullable<Awaited<ReturnType<typeof harTilgang>>>;
export type HarTilgangQueryError = ErrorType<unknown>;

export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = ErrorType<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHarTilgang<TData = Awaited<ReturnType<typeof harTilgang>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harTilgang>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getHarTilgangQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
