/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useMutation, useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {OppgaveOpplastingResponse, SendVedleggBody, VedleggResponse} from ".././model";

export const getHentVedleggUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vedlegg`;
};

export const hentVedlegg = async (fiksDigisosId: string, options?: RequestInit): Promise<VedleggResponse[]> => {
    const res = await fetch(getHentVedleggUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as VedleggResponse[];
};

export const getHentVedleggQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vedlegg`] as const;
};

export const getHentVedleggQueryOptions = <TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>>;
        fetch?: RequestInit;
    }
) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentVedleggQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentVedlegg>>> = ({signal}) =>
        hentVedlegg(fiksDigisosId, {signal, ...fetchOptions});

    return {queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentVedlegg>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentVedleggQueryResult = NonNullable<Awaited<ReturnType<typeof hentVedlegg>>>;
export type HentVedleggQueryError = unknown;

export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentVedleggQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getSendVedleggUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vedlegg`;
};

export const sendVedlegg = async (
    fiksDigisosId: string,
    sendVedleggBody: SendVedleggBody,
    options?: RequestInit
): Promise<OppgaveOpplastingResponse[]> => {
    const formData = new FormData();
    sendVedleggBody.files.forEach((value) => formData.append("files", value));

    const res = await fetch(getSendVedleggUrl(fiksDigisosId), {
        ...options,
        method: "POST",
        body: formData,
    });
    const data = await res.json();

    return data as OppgaveOpplastingResponse[];
};

export const getSendVedleggMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendVedlegg>>,
        TError,
        {fiksDigisosId: string; data: SendVedleggBody},
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof sendVedlegg>>,
    TError,
    {fiksDigisosId: string; data: SendVedleggBody},
    TContext
> => {
    const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof sendVedlegg>>,
        {fiksDigisosId: string; data: SendVedleggBody}
    > = (props) => {
        const {fiksDigisosId, data} = props ?? {};

        return sendVedlegg(fiksDigisosId, data, fetchOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type SendVedleggMutationResult = NonNullable<Awaited<ReturnType<typeof sendVedlegg>>>;
export type SendVedleggMutationBody = SendVedleggBody;
export type SendVedleggMutationError = unknown;

export const useSendVedlegg = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendVedlegg>>,
        TError,
        {fiksDigisosId: string; data: SendVedleggBody},
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof sendVedlegg>>,
    TError,
    {fiksDigisosId: string; data: SendVedleggBody},
    TContext
> => {
    const mutationOptions = getSendVedleggMutationOptions(options);

    return useMutation(mutationOptions);
};
