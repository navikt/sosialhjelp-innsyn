/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { OppgaveOpplastingResponse, SendVedleggBody, VedleggResponse } from ".././model";
import { customFetch } from "../../custom-fetch";
import type { ErrorType } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getHentVedleggUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vedlegg`;
};

export const hentVedlegg = async (fiksDigisosId: string, options?: RequestInit): Promise<VedleggResponse[]> => {
    return customFetch<Promise<VedleggResponse[]>>(getHentVedleggUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getHentVedleggQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vedlegg`] as const;
};

export const getHentVedleggQueryOptions = <
    TData = Awaited<ReturnType<typeof hentVedlegg>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentVedleggQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentVedlegg>>> = ({ signal }) =>
        hentVedlegg(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof hentVedlegg>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type HentVedleggQueryResult = NonNullable<Awaited<ReturnType<typeof hentVedlegg>>>;
export type HentVedleggQueryError = ErrorType<unknown>;

export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHentVedlegg<TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getHentVedleggQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getSendVedleggUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vedlegg`;
};

export const sendVedlegg = async (
    fiksDigisosId: string,
    sendVedleggBody: SendVedleggBody,
    options?: RequestInit
): Promise<OppgaveOpplastingResponse[]> => {
    const formData = new FormData();
    sendVedleggBody.files.forEach((value) => formData.append("files", value));

    return customFetch<Promise<OppgaveOpplastingResponse[]>>(getSendVedleggUrl(fiksDigisosId), {
        ...options,
        method: "POST",
        body: formData,
    });
};

export const getSendVedleggMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendVedlegg>>,
        TError,
        { fiksDigisosId: string; data: SendVedleggBody },
        TContext
    >;
    request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof sendVedlegg>>,
    TError,
    { fiksDigisosId: string; data: SendVedleggBody },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof sendVedlegg>>,
        { fiksDigisosId: string; data: SendVedleggBody }
    > = (props) => {
        const { fiksDigisosId, data } = props ?? {};

        return sendVedlegg(fiksDigisosId, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type SendVedleggMutationResult = NonNullable<Awaited<ReturnType<typeof sendVedlegg>>>;
export type SendVedleggMutationBody = SendVedleggBody;
export type SendVedleggMutationError = ErrorType<unknown>;

export const useSendVedlegg = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendVedlegg>>,
        TError,
        { fiksDigisosId: string; data: SendVedleggBody },
        TContext
    >;
    request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
    Awaited<ReturnType<typeof sendVedlegg>>,
    TError,
    { fiksDigisosId: string; data: SendVedleggBody },
    TContext
> => {
    const mutationOptions = getSendVedleggMutationOptions(options);

    return useMutation(mutationOptions);
};
