/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from "@tanstack/react-query";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const harSoknaderMedInnsyn = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<boolean>({url: `/api/v1/innsyn/harSoknaderMedInnsyn`, method: "get", signal}, options);
};

export const getHarSoknaderMedInnsynQueryKey = () => [`/api/v1/innsyn/harSoknaderMedInnsyn`] as const;

export const getHarSoknaderMedInnsynQueryOptions = <
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = ErrorType<unknown>
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHarSoknaderMedInnsynQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>> = ({signal}) =>
        harSoknaderMedInnsyn(requestOptions, signal);

    return {queryKey, queryFn, ...queryOptions};
};

export type HarSoknaderMedInnsynQueryResult = NonNullable<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>>;
export type HarSoknaderMedInnsynQueryError = ErrorType<unknown>;

export const useHarSoknaderMedInnsyn = <
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = ErrorType<unknown>
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getHarSoknaderMedInnsynQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};
