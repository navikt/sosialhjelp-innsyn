/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";

export const getHarSoknaderMedInnsynUrl = () => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/harSoknaderMedInnsyn`;
};

export const harSoknaderMedInnsyn = async (options?: RequestInit): Promise<boolean> => {
    const res = await fetch(getHarSoknaderMedInnsynUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as boolean;
};

export const getHarSoknaderMedInnsynQueryKey = () => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/harSoknaderMedInnsyn`] as const;
};

export const getHarSoknaderMedInnsynQueryOptions = <
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>>;
    fetch?: RequestInit;
}) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHarSoknaderMedInnsynQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>> = ({signal}) =>
        harSoknaderMedInnsyn({signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HarSoknaderMedInnsynQueryResult = NonNullable<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>>;
export type HarSoknaderMedInnsynQueryError = unknown;

export function useHarSoknaderMedInnsyn<
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = unknown,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>, "initialData">;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHarSoknaderMedInnsyn<
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>,
            "initialData"
        >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHarSoknaderMedInnsyn<
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHarSoknaderMedInnsyn<
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHarSoknaderMedInnsynQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
