/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {QueryFunction, QueryKey, UseQueryOptions, UseQueryResult} from "@tanstack/react-query";
import type {HentUtbetalingerParams} from "../model/hentUtbetalingerParams";
import type {NyeOgTidligereUtbetalingerResponse} from "../model/nyeOgTidligereUtbetalingerResponse";
import type {UtbetalingerResponse} from "../model/utbetalingerResponse";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const hentUtbetalinger = (
    params?: HentUtbetalingerParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<UtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/utbetalinger`, method: "GET", params, signal},
        options
    );
};

export const getHentUtbetalingerQueryKey = (params?: HentUtbetalingerParams) => {
    return [`/api/v1/innsyn/utbetalinger`, ...(params ? [params] : [])] as const;
};

export const getHentUtbetalingerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentUtbetalinger>>,
    TError = ErrorType<unknown>,
>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>>;
        request?: SecondParameter<typeof axiosInstance>;
    }
) => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentUtbetalingerQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentUtbetalinger>>> = ({signal}) =>
        hentUtbetalinger(params, requestOptions, signal);

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentUtbetalinger>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentUtbetalinger>>>;
export type HentUtbetalingerQueryError = ErrorType<unknown>;

export const useHentUtbetalinger = <TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = ErrorType<unknown>>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getHentUtbetalingerQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};

export const hentTidligereUtbetalinger = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<NyeOgTidligereUtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/tidligere`, method: "GET", signal},
        options
    );
};

export const getHentTidligereUtbetalingerQueryKey = () => {
    return [`/api/v1/innsyn/tidligere`] as const;
};

export const getHentTidligereUtbetalingerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>>;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentTidligereUtbetalingerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>> = ({signal}) =>
        hentTidligereUtbetalinger(requestOptions, signal);

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentTidligereUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>>;
export type HentTidligereUtbetalingerQueryError = ErrorType<unknown>;

export const useHentTidligereUtbetalinger = <
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getHentTidligereUtbetalingerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};

export const hentNyeUtbetalinger = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<NyeOgTidligereUtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/nye`, method: "GET", signal},
        options
    );
};

export const getHentNyeUtbetalingerQueryKey = () => {
    return [`/api/v1/innsyn/nye`] as const;
};

export const getHentNyeUtbetalingerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>>;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentNyeUtbetalingerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentNyeUtbetalinger>>> = ({signal}) =>
        hentNyeUtbetalinger(requestOptions, signal);

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentNyeUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentNyeUtbetalinger>>>;
export type HentNyeUtbetalingerQueryError = ErrorType<unknown>;

export const useHentNyeUtbetalinger = <
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getHentNyeUtbetalingerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};
