/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {HentUtbetalingerParams, NyeOgTidligereUtbetalingerResponse, UtbetalingerResponse} from ".././model";

export const getHentUtbetalingerUrl = (params?: HentUtbetalingerParams) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(key, value === null ? "null" : value.toString());
        }
    });

    return normalizedParams.size
        ? `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/utbetalinger?${normalizedParams.toString()}`
        : `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/utbetalinger`;
};

export const hentUtbetalinger = async (
    params?: HentUtbetalingerParams,
    options?: RequestInit
): Promise<UtbetalingerResponse[]> => {
    const res = await fetch(getHentUtbetalingerUrl(params), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as UtbetalingerResponse[];
};

export const getHentUtbetalingerQueryKey = (params?: HentUtbetalingerParams) => {
    return [
        `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/utbetalinger`,
        ...(params ? [params] : []),
    ] as const;
};

export const getHentUtbetalingerQueryOptions = <TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = unknown>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>>;
        fetch?: RequestInit;
    }
) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentUtbetalingerQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentUtbetalinger>>> = ({signal}) =>
        hentUtbetalinger(params, {signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentUtbetalinger>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentUtbetalinger>>>;
export type HentUtbetalingerQueryError = unknown;

export function useHentUtbetalinger<TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = unknown>(
    params: undefined | HentUtbetalingerParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentUtbetalinger<TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = unknown>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>,
                "initialData"
            >;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentUtbetalinger<TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = unknown>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentUtbetalinger<TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = unknown>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentUtbetalingerQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getHentTidligereUtbetalingerUrl = () => {
    return `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/tidligere`;
};

export const hentTidligereUtbetalinger = async (
    options?: RequestInit
): Promise<NyeOgTidligereUtbetalingerResponse[]> => {
    const res = await fetch(getHentTidligereUtbetalingerUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as NyeOgTidligereUtbetalingerResponse[];
};

export const getHentTidligereUtbetalingerQueryKey = () => {
    return [`https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/tidligere`] as const;
};

export const getHentTidligereUtbetalingerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>>;
    fetch?: RequestInit;
}) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentTidligereUtbetalingerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>> = ({signal}) =>
        hentTidligereUtbetalinger({signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentTidligereUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>>;
export type HentTidligereUtbetalingerQueryError = unknown;

export function useHentTidligereUtbetalinger<
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = unknown,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>,
            "initialData"
        >;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentTidligereUtbetalinger<
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>,
            "initialData"
        >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentTidligereUtbetalinger<
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentTidligereUtbetalinger<
    TData = Awaited<ReturnType<typeof hentTidligereUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentTidligereUtbetalinger>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentTidligereUtbetalingerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getHentNyeUtbetalingerUrl = () => {
    return `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/nye`;
};

export const hentNyeUtbetalinger = async (options?: RequestInit): Promise<NyeOgTidligereUtbetalingerResponse[]> => {
    const res = await fetch(getHentNyeUtbetalingerUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as NyeOgTidligereUtbetalingerResponse[];
};

export const getHentNyeUtbetalingerQueryKey = () => {
    return [`https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/nye`] as const;
};

export const getHentNyeUtbetalingerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>>;
    fetch?: RequestInit;
}) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentNyeUtbetalingerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentNyeUtbetalinger>>> = ({signal}) =>
        hentNyeUtbetalinger({signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentNyeUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentNyeUtbetalinger>>>;
export type HentNyeUtbetalingerQueryError = unknown;

export function useHentNyeUtbetalinger<
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = unknown,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>, "initialData">;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentNyeUtbetalinger<
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>,
            "initialData"
        >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentNyeUtbetalinger<
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentNyeUtbetalinger<
    TData = Awaited<ReturnType<typeof hentNyeUtbetalinger>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentNyeUtbetalinger>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentNyeUtbetalingerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
