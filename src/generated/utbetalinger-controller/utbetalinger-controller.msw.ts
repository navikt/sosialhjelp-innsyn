/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {faker} from "@faker-js/faker";
import {HttpResponse, delay, http} from "msw";
import type {NyeOgTidligereUtbetalingerResponse, UtbetalingerResponse} from ".././model";

export const getHentUtbetalingerResponseMock = (overrideResponse: any = {}): UtbetalingerResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        ar: faker.number.int({min: undefined, max: undefined}),
        foersteIManeden: faker.date.past().toISOString().split("T")[0],
        maned: faker.number.int({min: undefined, max: undefined}),
        utbetalinger: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            annenMottaker: faker.datatype.boolean(),
            belop: faker.number.int({min: undefined, max: undefined}),
            fiksDigisosId: faker.word.sample(),
            fom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            forfallsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            kontonummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            mottaker: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            status: faker.word.sample(),
            tittel: faker.word.sample(),
            tom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsmetode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        })),
        ...overrideResponse,
    }));

export const getHentTidligereUtbetalingerResponseMock = (
    overrideResponse: any = {}
): NyeOgTidligereUtbetalingerResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        ar: faker.number.int({min: undefined, max: undefined}),
        maned: faker.number.int({min: undefined, max: undefined}),
        utbetalingerForManed: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            annenMottaker: faker.datatype.boolean(),
            belop: faker.number.int({min: undefined, max: undefined}),
            fiksDigisosId: faker.word.sample(),
            fom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            forfallsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            kontonummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            mottaker: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            status: faker.word.sample(),
            tittel: faker.word.sample(),
            tom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsmetode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        })),
        ...overrideResponse,
    }));

export const getHentNyeUtbetalingerResponseMock = (overrideResponse: any = {}): NyeOgTidligereUtbetalingerResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        ar: faker.number.int({min: undefined, max: undefined}),
        maned: faker.number.int({min: undefined, max: undefined}),
        utbetalingerForManed: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            annenMottaker: faker.datatype.boolean(),
            belop: faker.number.int({min: undefined, max: undefined}),
            fiksDigisosId: faker.word.sample(),
            fom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            forfallsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            kontonummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            mottaker: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            status: faker.word.sample(),
            tittel: faker.word.sample(),
            tom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsmetode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        })),
        ...overrideResponse,
    }));

export const getHentUtbetalingerMockHandler = (overrideResponse?: UtbetalingerResponse[]) => {
    return http.get("*/api/v1/innsyn/utbetalinger", async () => {
        await delay(1000);
        return new HttpResponse(
            JSON.stringify(overrideResponse ? overrideResponse : getHentUtbetalingerResponseMock()),
            {
                status: 200,
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
    });
};

export const getHentTidligereUtbetalingerMockHandler = (overrideResponse?: NyeOgTidligereUtbetalingerResponse[]) => {
    return http.get("*/api/v1/innsyn/tidligere", async () => {
        await delay(1000);
        return new HttpResponse(
            JSON.stringify(overrideResponse ? overrideResponse : getHentTidligereUtbetalingerResponseMock()),
            {
                status: 200,
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
    });
};

export const getHentNyeUtbetalingerMockHandler = (overrideResponse?: NyeOgTidligereUtbetalingerResponse[]) => {
    return http.get("*/api/v1/innsyn/nye", async () => {
        await delay(1000);
        return new HttpResponse(
            JSON.stringify(overrideResponse ? overrideResponse : getHentNyeUtbetalingerResponseMock()),
            {
                status: 200,
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
    });
};
export const getUtbetalingerControllerMock = () => [
    getHentUtbetalingerMockHandler(),
    getHentTidligereUtbetalingerMockHandler(),
    getHentNyeUtbetalingerMockHandler(),
];
