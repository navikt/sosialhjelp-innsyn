/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {faker} from "@faker-js/faker";
import {HttpResponse, delay, http} from "msw";

export const getHentUtbetalingerMock = () =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        ar: faker.number.int({min: undefined, max: undefined}),
        foersteIManeden: faker.date.past().toISOString().split("T")[0],
        maned: faker.number.int({min: undefined, max: undefined}),
        utbetalinger: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            annenMottaker: faker.datatype.boolean(),
            belop: faker.number.int({min: undefined, max: undefined}),
            fiksDigisosId: faker.word.sample(),
            fom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            forfallsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            kontonummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            mottaker: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            status: faker.word.sample(),
            tittel: faker.word.sample(),
            tom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsmetode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
    }));

export const getHentTidligereUtbetalingerMock = () =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        ar: faker.number.int({min: undefined, max: undefined}),
        maned: faker.number.int({min: undefined, max: undefined}),
        utbetalingerForManed: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            annenMottaker: faker.datatype.boolean(),
            belop: faker.number.int({min: undefined, max: undefined}),
            fiksDigisosId: faker.word.sample(),
            fom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            forfallsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            kontonummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            mottaker: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            status: faker.word.sample(),
            tittel: faker.word.sample(),
            tom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsmetode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
    }));

export const getHentNyeUtbetalingerMock = () =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        ar: faker.number.int({min: undefined, max: undefined}),
        maned: faker.number.int({min: undefined, max: undefined}),
        utbetalingerForManed: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            annenMottaker: faker.datatype.boolean(),
            belop: faker.number.int({min: undefined, max: undefined}),
            fiksDigisosId: faker.word.sample(),
            fom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            forfallsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            kontonummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            mottaker: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            status: faker.word.sample(),
            tittel: faker.word.sample(),
            tom: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsdato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            utbetalingsmetode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
    }));

export const getUtbetalingerControllerMock = () => [
    http.get("*/api/v1/innsyn/utbetalinger", async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getHentUtbetalingerMock()), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });
    }),
    http.get("*/api/v1/innsyn/tidligere", async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getHentTidligereUtbetalingerMock()), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });
    }),
    http.get("*/api/v1/innsyn/nye", async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getHentNyeUtbetalingerMock()), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });
    }),
];
