/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { DokumentasjonkravResponse, OppgaveResponse, VilkarResponse } from ".././model";
import { customFetch } from "../../custom-fetch";
import type { ErrorType } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getGetVilkarUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vilkar`;
};

export const getVilkar = async (fiksDigisosId: string, options?: RequestInit): Promise<VilkarResponse[]> => {
    return customFetch<Promise<VilkarResponse[]>>(getGetVilkarUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getGetVilkarQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/vilkar`] as const;
};

export const getGetVilkarQueryOptions = <TData = Awaited<ReturnType<typeof getVilkar>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetVilkarQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVilkar>>> = ({ signal }) =>
        getVilkar(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getVilkar>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetVilkarQueryResult = NonNullable<Awaited<ReturnType<typeof getVilkar>>>;
export type GetVilkarQueryError = ErrorType<unknown>;

export function useGetVilkar<TData = Awaited<ReturnType<typeof getVilkar>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetVilkar<TData = Awaited<ReturnType<typeof getVilkar>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetVilkar<TData = Awaited<ReturnType<typeof getVilkar>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetVilkar<TData = Awaited<ReturnType<typeof getVilkar>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVilkar>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetVilkarQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetOppgaverUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/oppgaver`;
};

export const getOppgaver = async (fiksDigisosId: string, options?: RequestInit): Promise<OppgaveResponse[]> => {
    return customFetch<Promise<OppgaveResponse[]>>(getGetOppgaverUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getGetOppgaverQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/oppgaver`] as const;
};

export const getGetOppgaverQueryOptions = <
    TData = Awaited<ReturnType<typeof getOppgaver>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetOppgaverQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOppgaver>>> = ({ signal }) =>
        getOppgaver(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getOppgaver>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetOppgaverQueryResult = NonNullable<Awaited<ReturnType<typeof getOppgaver>>>;
export type GetOppgaverQueryError = ErrorType<unknown>;

export function useGetOppgaver<TData = Awaited<ReturnType<typeof getOppgaver>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOppgaver<TData = Awaited<ReturnType<typeof getOppgaver>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOppgaver<TData = Awaited<ReturnType<typeof getOppgaver>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetOppgaver<TData = Awaited<ReturnType<typeof getOppgaver>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaver>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetOppgaverQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetOppgaveMedIdUrl = (fiksDigisosId: string, oppgaveId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/oppgaver/${oppgaveId}`;
};

export const getOppgaveMedId = async (
    fiksDigisosId: string,
    oppgaveId: string,
    options?: RequestInit
): Promise<OppgaveResponse[]> => {
    return customFetch<Promise<OppgaveResponse[]>>(getGetOppgaveMedIdUrl(fiksDigisosId, oppgaveId), {
        ...options,
        method: "GET",
    });
};

export const getGetOppgaveMedIdQueryKey = (fiksDigisosId: string, oppgaveId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/oppgaver/${oppgaveId}`] as const;
};

export const getGetOppgaveMedIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getOppgaveMedId>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    oppgaveId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetOppgaveMedIdQueryKey(fiksDigisosId, oppgaveId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOppgaveMedId>>> = ({ signal }) =>
        getOppgaveMedId(fiksDigisosId, oppgaveId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!(fiksDigisosId && oppgaveId), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getOppgaveMedId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetOppgaveMedIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOppgaveMedId>>>;
export type GetOppgaveMedIdQueryError = ErrorType<unknown>;

export function useGetOppgaveMedId<TData = Awaited<ReturnType<typeof getOppgaveMedId>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    oppgaveId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOppgaveMedId<TData = Awaited<ReturnType<typeof getOppgaveMedId>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    oppgaveId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOppgaveMedId<TData = Awaited<ReturnType<typeof getOppgaveMedId>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    oppgaveId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetOppgaveMedId<TData = Awaited<ReturnType<typeof getOppgaveMedId>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    oppgaveId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOppgaveMedId>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetOppgaveMedIdQueryOptions(fiksDigisosId, oppgaveId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetHarLevertDokumentasjonkravUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/harLeverteDokumentasjonkrav`;
};

export const getHarLevertDokumentasjonkrav = async (fiksDigisosId: string, options?: RequestInit): Promise<boolean> => {
    return customFetch<Promise<boolean>>(getGetHarLevertDokumentasjonkravUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getGetHarLevertDokumentasjonkravQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/harLeverteDokumentasjonkrav`] as const;
};

export const getGetHarLevertDokumentasjonkravQueryOptions = <
    TData = Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetHarLevertDokumentasjonkravQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>> = ({ signal }) =>
        getHarLevertDokumentasjonkrav(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetHarLevertDokumentasjonkravQueryResult = NonNullable<
    Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>
>;
export type GetHarLevertDokumentasjonkravQueryError = ErrorType<unknown>;

export function useGetHarLevertDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetHarLevertDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetHarLevertDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetHarLevertDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHarLevertDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetHarLevertDokumentasjonkravQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetfagsystemHarDokumentasjonkravUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/fagsystemHarDokumentasjonkrav`;
};

export const getfagsystemHarDokumentasjonkrav = async (
    fiksDigisosId: string,
    options?: RequestInit
): Promise<boolean> => {
    return customFetch<Promise<boolean>>(getGetfagsystemHarDokumentasjonkravUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getGetfagsystemHarDokumentasjonkravQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/fagsystemHarDokumentasjonkrav`] as const;
};

export const getGetfagsystemHarDokumentasjonkravQueryOptions = <
    TData = Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetfagsystemHarDokumentasjonkravQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>> = ({ signal }) =>
        getfagsystemHarDokumentasjonkrav(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetfagsystemHarDokumentasjonkravQueryResult = NonNullable<
    Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>
>;
export type GetfagsystemHarDokumentasjonkravQueryError = ErrorType<unknown>;

export function useGetfagsystemHarDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetfagsystemHarDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetfagsystemHarDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetfagsystemHarDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getfagsystemHarDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetfagsystemHarDokumentasjonkravQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetDokumentasjonkravUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/dokumentasjonkrav`;
};

export const getDokumentasjonkrav = async (
    fiksDigisosId: string,
    options?: RequestInit
): Promise<DokumentasjonkravResponse[]> => {
    return customFetch<Promise<DokumentasjonkravResponse[]>>(getGetDokumentasjonkravUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getGetDokumentasjonkravQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/dokumentasjonkrav`] as const;
};

export const getGetDokumentasjonkravQueryOptions = <
    TData = Awaited<ReturnType<typeof getDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDokumentasjonkravQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDokumentasjonkrav>>> = ({ signal }) =>
        getDokumentasjonkrav(fiksDigisosId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDokumentasjonkrav>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDokumentasjonkravQueryResult = NonNullable<Awaited<ReturnType<typeof getDokumentasjonkrav>>>;
export type GetDokumentasjonkravQueryError = ErrorType<unknown>;

export function useGetDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDokumentasjonkrav<
    TData = Awaited<ReturnType<typeof getDokumentasjonkrav>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkrav>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDokumentasjonkravQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetDokumentasjonkravMedIdUrl = (fiksDigisosId: string, dokumentasjonkravId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/dokumentasjonkrav/${dokumentasjonkravId}`;
};

export const getDokumentasjonkravMedId = async (
    fiksDigisosId: string,
    dokumentasjonkravId: string,
    options?: RequestInit
): Promise<DokumentasjonkravResponse[]> => {
    return customFetch<Promise<DokumentasjonkravResponse[]>>(
        getGetDokumentasjonkravMedIdUrl(fiksDigisosId, dokumentasjonkravId),
        {
            ...options,
            method: "GET",
        }
    );
};

export const getGetDokumentasjonkravMedIdQueryKey = (fiksDigisosId: string, dokumentasjonkravId: string) => {
    return [
        `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/dokumentasjonkrav/${dokumentasjonkravId}`,
    ] as const;
};

export const getGetDokumentasjonkravMedIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getDokumentasjonkravMedId>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    dokumentasjonkravId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetDokumentasjonkravMedIdQueryKey(fiksDigisosId, dokumentasjonkravId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>> = ({ signal }) =>
        getDokumentasjonkravMedId(fiksDigisosId, dokumentasjonkravId, { signal, ...requestOptions });

    return { queryKey, queryFn, enabled: !!(fiksDigisosId && dokumentasjonkravId), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getDokumentasjonkravMedId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetDokumentasjonkravMedIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>>;
export type GetDokumentasjonkravMedIdQueryError = ErrorType<unknown>;

export function useGetDokumentasjonkravMedId<
    TData = Awaited<ReturnType<typeof getDokumentasjonkravMedId>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    dokumentasjonkravId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDokumentasjonkravMedId<
    TData = Awaited<ReturnType<typeof getDokumentasjonkravMedId>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    dokumentasjonkravId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDokumentasjonkravMedId<
    TData = Awaited<ReturnType<typeof getDokumentasjonkravMedId>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    dokumentasjonkravId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetDokumentasjonkravMedId<
    TData = Awaited<ReturnType<typeof getDokumentasjonkravMedId>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    dokumentasjonkravId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDokumentasjonkravMedId>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetDokumentasjonkravMedIdQueryOptions(fiksDigisosId, dokumentasjonkravId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
