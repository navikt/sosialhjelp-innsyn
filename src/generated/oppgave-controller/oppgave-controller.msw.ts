/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {faker} from "@faker-js/faker";
import {HttpResponse, delay, http} from "msw";
import type {DokumentasjonkravResponse, OppgaveResponse, VilkarResponse} from ".././model";

export const getGetVilkarResponseMock = (): VilkarResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        beskrivelse: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        hendelsetidspunkt: faker.date.past().toISOString().split("T")[0],
        status: faker.helpers.arrayElement([
            "RELEVANT",
            "ANNULLERT",
            "OPPFYLT",
            "IKKE_OPPFYLT",
            "LEVERT_TIDLIGERE",
        ] as const),
        tittel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        utbetalingsReferanse: faker.helpers.arrayElement([
            Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => faker.word.sample()),
            undefined,
        ]),
        vilkarReferanse: faker.word.sample(),
    }));

export const getGetOppgaverResponseMock = (): OppgaveResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        innsendelsesfrist: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
        oppgaveElementer: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            dokumenttype: faker.word.sample(),
            erFraInnsyn: faker.datatype.boolean(),
            hendelsereferanse: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            hendelsetype: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    "dokumentasjonEtterspurt",
                    "dokumentasjonkrav",
                    "soknad",
                    "bruker",
                ] as const),
                undefined,
            ]),
            tilleggsinformasjon: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        oppgaveId: faker.word.sample(),
    }));

export const getGetOppgaveMedIdResponseMock = (): OppgaveResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        innsendelsesfrist: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
        oppgaveElementer: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            dokumenttype: faker.word.sample(),
            erFraInnsyn: faker.datatype.boolean(),
            hendelsereferanse: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            hendelsetype: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    "dokumentasjonEtterspurt",
                    "dokumentasjonkrav",
                    "soknad",
                    "bruker",
                ] as const),
                undefined,
            ]),
            tilleggsinformasjon: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        oppgaveId: faker.word.sample(),
    }));

export const getGetHarLevertDokumentasjonkravResponseMock = (): boolean => faker.datatype.boolean();

export const getGetfagsystemHarDokumentasjonkravResponseMock = (): boolean => faker.datatype.boolean();

export const getGetDokumentasjonkravResponseMock = (): DokumentasjonkravResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        dokumentasjonkravElementer: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(
            () => ({
                beskrivelse: faker.helpers.arrayElement([faker.word.sample(), undefined]),
                dokumentasjonkravReferanse: faker.word.sample(),
                hendelsetidspunkt: faker.date.past().toISOString().split("T")[0],
                hendelsetype: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        "dokumentasjonEtterspurt",
                        "dokumentasjonkrav",
                        "soknad",
                        "bruker",
                    ] as const),
                    undefined,
                ]),
                status: faker.helpers.arrayElement([
                    "RELEVANT",
                    "ANNULLERT",
                    "OPPFYLT",
                    "IKKE_OPPFYLT",
                    "LEVERT_TIDLIGERE",
                ] as const),
                tittel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
                utbetalingsReferanse: faker.helpers.arrayElement([
                    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                        faker.word.sample()
                    ),
                    undefined,
                ]),
            })
        ),
        dokumentasjonkravId: faker.word.sample(),
        frist: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
    }));

export const getGetDokumentasjonkravMedIdResponseMock = (): DokumentasjonkravResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        dokumentasjonkravElementer: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(
            () => ({
                beskrivelse: faker.helpers.arrayElement([faker.word.sample(), undefined]),
                dokumentasjonkravReferanse: faker.word.sample(),
                hendelsetidspunkt: faker.date.past().toISOString().split("T")[0],
                hendelsetype: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        "dokumentasjonEtterspurt",
                        "dokumentasjonkrav",
                        "soknad",
                        "bruker",
                    ] as const),
                    undefined,
                ]),
                status: faker.helpers.arrayElement([
                    "RELEVANT",
                    "ANNULLERT",
                    "OPPFYLT",
                    "IKKE_OPPFYLT",
                    "LEVERT_TIDLIGERE",
                ] as const),
                tittel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
                utbetalingsReferanse: faker.helpers.arrayElement([
                    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                        faker.word.sample()
                    ),
                    undefined,
                ]),
            })
        ),
        dokumentasjonkravId: faker.word.sample(),
        frist: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
    }));

export const getGetVilkarMockHandler = (
    overrideResponse?:
        | VilkarResponse[]
        | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VilkarResponse[]> | VilkarResponse[])
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/vilkar", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetVilkarResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getGetOppgaverMockHandler = (
    overrideResponse?:
        | OppgaveResponse[]
        | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<OppgaveResponse[]> | OppgaveResponse[])
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/oppgaver", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetOppgaverResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getGetOppgaveMedIdMockHandler = (
    overrideResponse?:
        | OppgaveResponse[]
        | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<OppgaveResponse[]> | OppgaveResponse[])
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/oppgaver/:oppgaveId", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetOppgaveMedIdResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getGetHarLevertDokumentasjonkravMockHandler = (
    overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<boolean> | boolean)
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/harLeverteDokumentasjonkrav", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetHarLevertDokumentasjonkravResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getGetfagsystemHarDokumentasjonkravMockHandler = (
    overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<boolean> | boolean)
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/fagsystemHarDokumentasjonkrav", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetfagsystemHarDokumentasjonkravResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getGetDokumentasjonkravMockHandler = (
    overrideResponse?:
        | DokumentasjonkravResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DokumentasjonkravResponse[]> | DokumentasjonkravResponse[])
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/dokumentasjonkrav", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetDokumentasjonkravResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getGetDokumentasjonkravMedIdMockHandler = (
    overrideResponse?:
        | DokumentasjonkravResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DokumentasjonkravResponse[]> | DokumentasjonkravResponse[])
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/dokumentasjonkrav/:dokumentasjonkravId", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetDokumentasjonkravMedIdResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};
export const getOppgaveControllerMock = () => [
    getGetVilkarMockHandler(),
    getGetOppgaverMockHandler(),
    getGetOppgaveMedIdMockHandler(),
    getGetHarLevertDokumentasjonkravMockHandler(),
    getGetfagsystemHarDokumentasjonkravMockHandler(),
    getGetDokumentasjonkravMockHandler(),
    getGetDokumentasjonkravMedIdMockHandler(),
];
