/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useMutation, useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {FilOpplastingBody, OppdaterDigisosSakParams} from ".././model";

export const getFilOpplastingUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/digisosapi/${fiksDigisosId}/filOpplasting`;
};

export const filOpplasting = async (
    fiksDigisosId: string,
    filOpplastingBody: FilOpplastingBody,
    options?: RequestInit
): Promise<string> => {
    const formData = new FormData();
    formData.append("file", filOpplastingBody.file);

    const res = await fetch(getFilOpplastingUrl(fiksDigisosId), {
        ...options,
        method: "POST",
        body: formData,
    });
    const data = await res.json();

    return data as string;
};

export const getFilOpplastingMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof filOpplasting>>,
        TError,
        {fiksDigisosId: string; data: FilOpplastingBody},
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof filOpplasting>>,
    TError,
    {fiksDigisosId: string; data: FilOpplastingBody},
    TContext
> => {
    const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof filOpplasting>>,
        {fiksDigisosId: string; data: FilOpplastingBody}
    > = (props) => {
        const {fiksDigisosId, data} = props ?? {};

        return filOpplasting(fiksDigisosId, data, fetchOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type FilOpplastingMutationResult = NonNullable<Awaited<ReturnType<typeof filOpplasting>>>;
export type FilOpplastingMutationBody = FilOpplastingBody;
export type FilOpplastingMutationError = unknown;

export const useFilOpplasting = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof filOpplasting>>,
        TError,
        {fiksDigisosId: string; data: FilOpplastingBody},
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof filOpplasting>>,
    TError,
    {fiksDigisosId: string; data: FilOpplastingBody},
    TContext
> => {
    const mutationOptions = getFilOpplastingMutationOptions(options);

    return useMutation(mutationOptions);
};
export const getOppdaterDigisosSakUrl = (params?: OppdaterDigisosSakParams) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(key, value === null ? "null" : value.toString());
        }
    });

    return normalizedParams.size
        ? `/sosialhjelp/innsyn/api/innsyn-api/api/v1/digisosapi/oppdaterDigisosSak?${normalizedParams.toString()}`
        : `/sosialhjelp/innsyn/api/innsyn-api/api/v1/digisosapi/oppdaterDigisosSak`;
};

export const oppdaterDigisosSak = async (
    oppdaterDigisosSakBody: string,
    params?: OppdaterDigisosSakParams,
    options?: RequestInit
): Promise<string> => {
    const res = await fetch(getOppdaterDigisosSakUrl(params), {
        ...options,
        method: "POST",
        headers: {"Content-Type": "application/json", ...options?.headers},
        body: JSON.stringify(oppdaterDigisosSakBody),
    });
    const data = await res.json();

    return data as string;
};

export const getOppdaterDigisosSakMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof oppdaterDigisosSak>>,
        TError,
        {data: string; params?: OppdaterDigisosSakParams},
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof oppdaterDigisosSak>>,
    TError,
    {data: string; params?: OppdaterDigisosSakParams},
    TContext
> => {
    const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof oppdaterDigisosSak>>,
        {data: string; params?: OppdaterDigisosSakParams}
    > = (props) => {
        const {data, params} = props ?? {};

        return oppdaterDigisosSak(data, params, fetchOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type OppdaterDigisosSakMutationResult = NonNullable<Awaited<ReturnType<typeof oppdaterDigisosSak>>>;
export type OppdaterDigisosSakMutationBody = string;
export type OppdaterDigisosSakMutationError = unknown;

export const useOppdaterDigisosSak = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof oppdaterDigisosSak>>,
        TError,
        {data: string; params?: OppdaterDigisosSakParams},
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof oppdaterDigisosSak>>,
    TError,
    {data: string; params?: OppdaterDigisosSakParams},
    TContext
> => {
    const mutationOptions = getOppdaterDigisosSakMutationOptions(options);

    return useMutation(mutationOptions);
};
export const getGetInnsynsfilUrl = (digisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/digisosapi/${digisosId}/innsynsfil`;
};

export const getInnsynsfil = async (digisosId: string, options?: RequestInit): Promise<string> => {
    const res = await fetch(getGetInnsynsfilUrl(digisosId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as string;
};

export const getGetInnsynsfilQueryKey = (digisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/digisosapi/${digisosId}/innsynsfil`] as const;
};

export const getGetInnsynsfilQueryOptions = <TData = Awaited<ReturnType<typeof getInnsynsfil>>, TError = unknown>(
    digisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>>;
        fetch?: RequestInit;
    }
) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInnsynsfilQueryKey(digisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInnsynsfil>>> = ({signal}) =>
        getInnsynsfil(digisosId, {signal, ...fetchOptions});

    return {queryKey, queryFn, enabled: !!digisosId, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getInnsynsfil>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type GetInnsynsfilQueryResult = NonNullable<Awaited<ReturnType<typeof getInnsynsfil>>>;
export type GetInnsynsfilQueryError = unknown;

export function useGetInnsynsfil<TData = Awaited<ReturnType<typeof getInnsynsfil>>, TError = unknown>(
    digisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useGetInnsynsfil<TData = Awaited<ReturnType<typeof getInnsynsfil>>, TError = unknown>(
    digisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useGetInnsynsfil<TData = Awaited<ReturnType<typeof getInnsynsfil>>, TError = unknown>(
    digisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useGetInnsynsfil<TData = Awaited<ReturnType<typeof getInnsynsfil>>, TError = unknown>(
    digisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getGetInnsynsfilQueryOptions(digisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
