/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery, useMutation} from "@tanstack/react-query";
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from "@tanstack/react-query";
import type {FilOpplastingBody, OppdaterDigisosSakParams} from ".././model";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const filOpplasting = (
    fiksDigisosId: string,
    filOpplastingBody: FilOpplastingBody,
    options?: SecondParameter<typeof axiosInstance>
) => {
    const formData = new FormData();
    formData.append("file", filOpplastingBody.file);

    return axiosInstance<string>(
        {
            url: `/api/v1/digisosapi/${fiksDigisosId}/filOpplasting`,
            method: "post",
            headers: {"Content-Type": "multipart/form-data"},
            data: formData,
        },
        options
    );
};

export const getFilOpplastingMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof filOpplasting>>,
        TError,
        {fiksDigisosId: string; data: FilOpplastingBody},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof filOpplasting>>,
    TError,
    {fiksDigisosId: string; data: FilOpplastingBody},
    TContext
> => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof filOpplasting>>,
        {fiksDigisosId: string; data: FilOpplastingBody}
    > = (props) => {
        const {fiksDigisosId, data} = props ?? {};

        return filOpplasting(fiksDigisosId, data, requestOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type FilOpplastingMutationResult = NonNullable<Awaited<ReturnType<typeof filOpplasting>>>;
export type FilOpplastingMutationBody = FilOpplastingBody;
export type FilOpplastingMutationError = ErrorType<unknown>;

export const useFilOpplasting = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof filOpplasting>>,
        TError,
        {fiksDigisosId: string; data: FilOpplastingBody},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const mutationOptions = getFilOpplastingMutationOptions(options);

    return useMutation(mutationOptions);
};
export const oppdaterDigisosSak = (
    oppdaterDigisosSakBody: string,
    params?: OppdaterDigisosSakParams,
    options?: SecondParameter<typeof axiosInstance>
) => {
    return axiosInstance<string>(
        {
            url: `/api/v1/digisosapi/oppdaterDigisosSak`,
            method: "post",
            headers: {"Content-Type": "application/json"},
            data: oppdaterDigisosSakBody,
            params,
        },
        options
    );
};

export const getOppdaterDigisosSakMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof oppdaterDigisosSak>>,
        TError,
        {data: string; params?: OppdaterDigisosSakParams},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof oppdaterDigisosSak>>,
    TError,
    {data: string; params?: OppdaterDigisosSakParams},
    TContext
> => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof oppdaterDigisosSak>>,
        {data: string; params?: OppdaterDigisosSakParams}
    > = (props) => {
        const {data, params} = props ?? {};

        return oppdaterDigisosSak(data, params, requestOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type OppdaterDigisosSakMutationResult = NonNullable<Awaited<ReturnType<typeof oppdaterDigisosSak>>>;
export type OppdaterDigisosSakMutationBody = string;
export type OppdaterDigisosSakMutationError = ErrorType<unknown>;

export const useOppdaterDigisosSak = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof oppdaterDigisosSak>>,
        TError,
        {data: string; params?: OppdaterDigisosSakParams},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const mutationOptions = getOppdaterDigisosSakMutationOptions(options);

    return useMutation(mutationOptions);
};
export const getInnsynsfil = (
    digisosId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<string[]>({url: `/api/v1/digisosapi/${digisosId}/innsynsfil`, method: "get", signal}, options);
};

export const getGetInnsynsfilQueryKey = (digisosId: string) => [`/api/v1/digisosapi/${digisosId}/innsynsfil`] as const;

export const getGetInnsynsfilQueryOptions = <
    TData = Awaited<ReturnType<typeof getInnsynsfil>>,
    TError = ErrorType<unknown>
>(
    digisosId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetInnsynsfilQueryKey(digisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInnsynsfil>>> = ({signal}) =>
        getInnsynsfil(digisosId, requestOptions, signal);

    return {queryKey, queryFn, enabled: !!digisosId, ...queryOptions};
};

export type GetInnsynsfilQueryResult = NonNullable<Awaited<ReturnType<typeof getInnsynsfil>>>;
export type GetInnsynsfilQueryError = ErrorType<unknown>;

export const useGetInnsynsfil = <TData = Awaited<ReturnType<typeof getInnsynsfil>>, TError = ErrorType<unknown>>(
    digisosId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof getInnsynsfil>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetInnsynsfilQueryOptions(digisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};
