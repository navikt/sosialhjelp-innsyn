/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {SoknadsStatusResponse} from ".././model";
import {customFetch} from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getHentSoknadsStatusUrl = (fiksDigisosId: string) => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/soknadsStatus`;
};

export const hentSoknadsStatus = async (
    fiksDigisosId: string,
    options?: RequestInit
): Promise<SoknadsStatusResponse> => {
    return customFetch<Promise<SoknadsStatusResponse>>(getHentSoknadsStatusUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
};

export const getHentSoknadsStatusQueryKey = (fiksDigisosId: string) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/${fiksDigisosId}/soknadsStatus`] as const;
};

export const getHentSoknadsStatusQueryOptions = <
    TData = Awaited<ReturnType<typeof hentSoknadsStatus>>,
    TError = unknown,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentSoknadsStatusQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentSoknadsStatus>>> = ({signal}) =>
        hentSoknadsStatus(fiksDigisosId, {signal, ...requestOptions});

    return {queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentSoknadsStatus>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentSoknadsStatusQueryResult = NonNullable<Awaited<ReturnType<typeof hentSoknadsStatus>>>;
export type HentSoknadsStatusQueryError = unknown;

export function useHentSoknadsStatus<TData = Awaited<ReturnType<typeof hentSoknadsStatus>>, TError = unknown>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentSoknadsStatus<TData = Awaited<ReturnType<typeof hentSoknadsStatus>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentSoknadsStatus<TData = Awaited<ReturnType<typeof hentSoknadsStatus>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentSoknadsStatus<TData = Awaited<ReturnType<typeof hentSoknadsStatus>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentSoknadsStatusQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
