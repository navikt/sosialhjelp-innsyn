/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {QueryFunction, QueryKey, UseQueryOptions, UseQueryResult} from "@tanstack/react-query";
import type {SoknadsStatusResponse} from ".././model";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const hentSoknadsStatus = (
    fiksDigisosId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<SoknadsStatusResponse>(
        {url: `/api/v1/innsyn/${fiksDigisosId}/soknadsStatus`, method: "GET", signal},
        options
    );
};

export const getHentSoknadsStatusQueryKey = (fiksDigisosId: string) => {
    return [`/api/v1/innsyn/${fiksDigisosId}/soknadsStatus`] as const;
};

export const getHentSoknadsStatusQueryOptions = <
    TData = Awaited<ReturnType<typeof hentSoknadsStatus>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>>;
        request?: SecondParameter<typeof axiosInstance>;
    }
) => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentSoknadsStatusQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentSoknadsStatus>>> = ({signal}) =>
        hentSoknadsStatus(fiksDigisosId, requestOptions, signal);

    return {queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentSoknadsStatus>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentSoknadsStatusQueryResult = NonNullable<Awaited<ReturnType<typeof hentSoknadsStatus>>>;
export type HentSoknadsStatusQueryError = ErrorType<unknown>;

export const useHentSoknadsStatus = <
    TData = Awaited<ReturnType<typeof hentSoknadsStatus>>,
    TError = ErrorType<unknown>,
>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSoknadsStatus>>, TError, TData>>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getHentSoknadsStatusQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};
