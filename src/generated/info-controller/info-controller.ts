/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useMutation} from "@tanstack/react-query";
import type {MutationFunction, UseMutationOptions, UseMutationResult} from "@tanstack/react-query";
import type {Logg} from ".././model";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postKlientlogg = (logg: Logg, options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<void>(
        {url: `/api/v1/info/logg`, method: "POST", headers: {"Content-Type": "application/json"}, data: logg},
        options
    );
};

export const getPostKlientloggMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postKlientlogg>>, TError, {data: Logg}, TContext>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof postKlientlogg>>, TError, {data: Logg}, TContext> => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postKlientlogg>>, {data: Logg}> = (props) => {
        const {data} = props ?? {};

        return postKlientlogg(data, requestOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type PostKlientloggMutationResult = NonNullable<Awaited<ReturnType<typeof postKlientlogg>>>;
export type PostKlientloggMutationBody = Logg;
export type PostKlientloggMutationError = ErrorType<unknown>;

export const usePostKlientlogg = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postKlientlogg>>, TError, {data: Logg}, TContext>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof postKlientlogg>>, TError, {data: Logg}, TContext> => {
    const mutationOptions = getPostKlientloggMutationOptions(options);

    return useMutation(mutationOptions);
};
