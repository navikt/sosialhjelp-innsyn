/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {faker} from "@faker-js/faker";
import {HttpResponse, delay, http} from "msw";
import type {SaksDetaljerResponse, SaksListeResponse} from ".././model";

export const getHentSaksDetaljerResponseMock = (
    overrideResponse: Partial<SaksDetaljerResponse> = {}
): SaksDetaljerResponse => ({
    antallNyeOppgaver: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]),
    fiksDigisosId: faker.word.sample(),
    soknadTittel: faker.word.sample(),
    status: faker.word.sample(),
    ...overrideResponse,
});

export const getHentAlleSakerResponseMock = (): SaksListeResponse[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        fiksDigisosId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        isBrokenSoknad: faker.datatype.boolean(),
        kilde: faker.word.sample(),
        kommunenummer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        sistOppdatert: `${faker.date.past().toISOString().split(".")[0]}Z`,
        soknadTittel: faker.word.sample(),
        url: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    }));

export const getHentSaksDetaljerMockHandler = (
    overrideResponse?:
        | SaksDetaljerResponse
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<SaksDetaljerResponse> | SaksDetaljerResponse)
) => {
    return http.get("*/api/v1/innsyn/saksDetaljer", async (info) => {
        await delay(1000);
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getHentSaksDetaljerResponseMock()
            ),
            {
                status: 200,
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
    });
};

export const getHentAlleSakerMockHandler = (
    overrideResponse?:
        | SaksListeResponse[]
        | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SaksListeResponse[]> | SaksListeResponse[])
) => {
    return http.get("*/api/v1/innsyn/saker", async (info) => {
        await delay(1000);
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getHentAlleSakerResponseMock()
            ),
            {
                status: 200,
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
    });
};
export const getSaksOversiktControllerMock = () => [getHentSaksDetaljerMockHandler(), getHentAlleSakerMockHandler()];
