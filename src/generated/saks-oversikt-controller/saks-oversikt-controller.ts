/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {HentSaksDetaljerParams, SaksDetaljerResponse, SaksListeResponse} from ".././model";

export const getHentSaksDetaljerUrl = (params: HentSaksDetaljerParams) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(key, value === null ? "null" : value.toString());
        }
    });

    return normalizedParams.size
        ? `https://www.ekstern.dev.nav.no/sosialhjelp/innsyn-wonderwall/sosialhjelp/innsyn-api/api/v1/innsyn/saksDetaljer?${normalizedParams.toString()}`
        : `https://www.ekstern.dev.nav.no/sosialhjelp/innsyn-wonderwall/sosialhjelp/innsyn-api/api/v1/innsyn/saksDetaljer`;
};

export const hentSaksDetaljer = async (
    params: HentSaksDetaljerParams,
    options?: RequestInit
): Promise<SaksDetaljerResponse> => {
    const res = await fetch(getHentSaksDetaljerUrl(params), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as SaksDetaljerResponse;
};

export const getHentSaksDetaljerQueryKey = (params: HentSaksDetaljerParams) => {
    return [
        `https://www.ekstern.dev.nav.no/sosialhjelp/innsyn-wonderwall/sosialhjelp/innsyn-api/api/v1/innsyn/saksDetaljer`,
        ...(params ? [params] : []),
    ] as const;
};

export const getHentSaksDetaljerQueryOptions = <TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = unknown>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>>;
        fetch?: RequestInit;
    }
) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentSaksDetaljerQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentSaksDetaljer>>> = ({signal}) =>
        hentSaksDetaljer(params, {signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentSaksDetaljer>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentSaksDetaljerQueryResult = NonNullable<Awaited<ReturnType<typeof hentSaksDetaljer>>>;
export type HentSaksDetaljerQueryError = unknown;

export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = unknown>(
    params: HentSaksDetaljerParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = unknown>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>,
                "initialData"
            >;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = unknown>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = unknown>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentSaksDetaljerQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getHentAlleSakerUrl = () => {
    return `https://www.ekstern.dev.nav.no/sosialhjelp/innsyn-wonderwall/sosialhjelp/innsyn-api/api/v1/innsyn/saker`;
};

export const hentAlleSaker = async (options?: RequestInit): Promise<SaksListeResponse[]> => {
    const res = await fetch(getHentAlleSakerUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as SaksListeResponse[];
};

export const getHentAlleSakerQueryKey = () => {
    return [
        `https://www.ekstern.dev.nav.no/sosialhjelp/innsyn-wonderwall/sosialhjelp/innsyn-api/api/v1/innsyn/saker`,
    ] as const;
};

export const getHentAlleSakerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentAlleSaker>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>>;
    fetch?: RequestInit;
}) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentAlleSakerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentAlleSaker>>> = ({signal}) =>
        hentAlleSaker({signal, ...fetchOptions});

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentAlleSaker>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentAlleSakerQueryResult = NonNullable<Awaited<ReturnType<typeof hentAlleSaker>>>;
export type HentAlleSakerQueryError = unknown;

export function useHentAlleSaker<TData = Awaited<ReturnType<typeof hentAlleSaker>>, TError = unknown>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>, "initialData">;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentAlleSaker<TData = Awaited<ReturnType<typeof hentAlleSaker>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>, "initialData">;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentAlleSaker<TData = Awaited<ReturnType<typeof hentAlleSaker>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentAlleSaker<TData = Awaited<ReturnType<typeof hentAlleSaker>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>>;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentAlleSakerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
