/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { HentSaksDetaljerParams, SaksDetaljerResponse, SaksListeResponse } from ".././model";
import { customFetch } from "../../custom-fetch";
import type { ErrorType } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getHentSaksDetaljerUrl = (params: HentSaksDetaljerParams) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(key, value === null ? "null" : value.toString());
        }
    });

    return normalizedParams.size
        ? `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/saksDetaljer?${normalizedParams.toString()}`
        : `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/saksDetaljer`;
};

export const hentSaksDetaljer = async (
    params: HentSaksDetaljerParams,
    options?: RequestInit
): Promise<SaksDetaljerResponse> => {
    return customFetch<Promise<SaksDetaljerResponse>>(getHentSaksDetaljerUrl(params), {
        ...options,
        method: "GET",
    });
};

export const getHentSaksDetaljerQueryKey = (params: HentSaksDetaljerParams) => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/saksDetaljer`, ...(params ? [params] : [])] as const;
};

export const getHentSaksDetaljerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentSaksDetaljer>>,
    TError = ErrorType<unknown>,
>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentSaksDetaljerQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentSaksDetaljer>>> = ({ signal }) =>
        hentSaksDetaljer(params, { signal, ...requestOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof hentSaksDetaljer>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type HentSaksDetaljerQueryResult = NonNullable<Awaited<ReturnType<typeof hentSaksDetaljer>>>;
export type HentSaksDetaljerQueryError = ErrorType<unknown>;

export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = ErrorType<unknown>>(
    params: HentSaksDetaljerParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>, "initialData">;
        request?: SecondParameter<typeof customFetch>;
    }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = ErrorType<unknown>>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>,
                "initialData"
            >;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = ErrorType<unknown>>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHentSaksDetaljer<TData = Awaited<ReturnType<typeof hentSaksDetaljer>>, TError = ErrorType<unknown>>(
    params: HentSaksDetaljerParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentSaksDetaljer>>, TError, TData>>;
        request?: SecondParameter<typeof customFetch>;
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getHentSaksDetaljerQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getHentAlleSakerUrl = () => {
    return `/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/saker`;
};

export const hentAlleSaker = async (options?: RequestInit): Promise<SaksListeResponse[]> => {
    return customFetch<Promise<SaksListeResponse[]>>(getHentAlleSakerUrl(), {
        ...options,
        method: "GET",
    });
};

export const getHentAlleSakerQueryKey = () => {
    return [`/sosialhjelp/innsyn/api/innsyn-api/api/v1/innsyn/saker`] as const;
};

export const getHentAlleSakerQueryOptions = <
    TData = Awaited<ReturnType<typeof hentAlleSaker>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentAlleSakerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentAlleSaker>>> = ({ signal }) =>
        hentAlleSaker({ signal, ...requestOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof hentAlleSaker>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type HentAlleSakerQueryResult = NonNullable<Awaited<ReturnType<typeof hentAlleSaker>>>;
export type HentAlleSakerQueryError = ErrorType<unknown>;

export function useHentAlleSaker<
    TData = Awaited<ReturnType<typeof hentAlleSaker>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentAlleSaker<
    TData = Awaited<ReturnType<typeof hentAlleSaker>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>, "initialData">;
    request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHentAlleSaker<
    TData = Awaited<ReturnType<typeof hentAlleSaker>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHentAlleSaker<
    TData = Awaited<ReturnType<typeof hentAlleSaker>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentAlleSaker>>, TError, TData>>;
    request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getHentAlleSakerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
