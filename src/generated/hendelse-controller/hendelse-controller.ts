/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {HendelseResponse} from ".././model";

export const getHentHendelserUrl = (fiksDigisosId: string) => {
    return `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/${fiksDigisosId}/hendelser`;
};

export const hentHendelser = async (fiksDigisosId: string, options?: RequestInit): Promise<HendelseResponse[]> => {
    const res = await fetch(getHentHendelserUrl(fiksDigisosId), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return data as HendelseResponse[];
};

export const getHentHendelserQueryKey = (fiksDigisosId: string) => {
    return [
        `https://www.ekstern.dev.nav.no/sosialhjelp/wonderwall-innsyn/api/v1/innsyn/${fiksDigisosId}/hendelser`,
    ] as const;
};

export const getHentHendelserQueryOptions = <TData = Awaited<ReturnType<typeof hentHendelser>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>>;
        fetch?: RequestInit;
    }
) => {
    const {query: queryOptions, fetch: fetchOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentHendelserQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentHendelser>>> = ({signal}) =>
        hentHendelser(fiksDigisosId, {signal, ...fetchOptions});

    return {queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentHendelser>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentHendelserQueryResult = NonNullable<Awaited<ReturnType<typeof hentHendelser>>>;
export type HentHendelserQueryError = unknown;

export function useHentHendelser<TData = Awaited<ReturnType<typeof hentHendelser>>, TError = unknown>(
    fiksDigisosId: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>> &
            Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): DefinedUseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentHendelser<TData = Awaited<ReturnType<typeof hentHendelser>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>> &
            Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>, "initialData">;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};
export function useHentHendelser<TData = Awaited<ReturnType<typeof hentHendelser>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey};

export function useHentHendelser<TData = Awaited<ReturnType<typeof hentHendelser>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof hentHendelser>>, TError, TData>>;
        fetch?: RequestInit;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
    const queryOptions = getHentHendelserQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
}
