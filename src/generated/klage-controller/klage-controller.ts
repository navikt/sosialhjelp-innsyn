/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useMutation, useQuery} from "@tanstack/react-query";
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type {InputKlage, KlageDto, Unit} from ".././model";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const hentKlager = (
    fiksDigisosId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<KlageDto[]>({url: `/api/v1/innsyn/${fiksDigisosId}/klage`, method: "get", signal}, options);
};

export const getHentKlagerQueryKey = (fiksDigisosId: string) => {
    return [`/api/v1/innsyn/${fiksDigisosId}/klage`] as const;
};

export const getHentKlagerQueryOptions = <TData = Awaited<ReturnType<typeof hentKlager>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentKlager>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
) => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentKlagerQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentKlager>>> = ({signal}) =>
        hentKlager(fiksDigisosId, requestOptions, signal);

    return {queryKey, queryFn, enabled: !!fiksDigisosId, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof hentKlager>>,
        TError,
        TData
    > & {queryKey: QueryKey};
};

export type HentKlagerQueryResult = NonNullable<Awaited<ReturnType<typeof hentKlager>>>;
export type HentKlagerQueryError = ErrorType<unknown>;

export const useHentKlager = <TData = Awaited<ReturnType<typeof hentKlager>>, TError = ErrorType<unknown>>(
    fiksDigisosId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentKlager>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getHentKlagerQueryOptions(fiksDigisosId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryOptions.queryKey;

    return query;
};

export const sendKlage = (
    fiksDigisosId: string,
    inputKlage: InputKlage,
    options?: SecondParameter<typeof axiosInstance>
) => {
    return axiosInstance<Unit>(
        {
            url: `/api/v1/innsyn/${fiksDigisosId}/klage`,
            method: "post",
            headers: {"Content-Type": "application/json;charset=UTF-8"},
            data: inputKlage,
        },
        options
    );
};

export const getSendKlageMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendKlage>>,
        TError,
        {fiksDigisosId: string; data: InputKlage},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof sendKlage>>,
    TError,
    {fiksDigisosId: string; data: InputKlage},
    TContext
> => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof sendKlage>>,
        {fiksDigisosId: string; data: InputKlage}
    > = (props) => {
        const {fiksDigisosId, data} = props ?? {};

        return sendKlage(fiksDigisosId, data, requestOptions);
    };

    return {mutationFn, ...mutationOptions};
};

export type SendKlageMutationResult = NonNullable<Awaited<ReturnType<typeof sendKlage>>>;
export type SendKlageMutationBody = InputKlage;
export type SendKlageMutationError = ErrorType<unknown>;

export const useSendKlage = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendKlage>>,
        TError,
        {fiksDigisosId: string; data: InputKlage},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const mutationOptions = getSendKlageMutationOptions(options);

    return useMutation(mutationOptions);
};
