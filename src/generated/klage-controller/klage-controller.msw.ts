/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {faker} from "@faker-js/faker";
import {HttpResponse, delay, http} from "msw";
import type {KlageDto, Unit} from ".././model";

export const getHentKlagerResponseMock = (overrideResponse: any = {}): KlageDto[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        klageUrl: {
            dato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            id: faker.word.sample(),
            url: faker.word.sample(),
            ...overrideResponse,
        },
        nyttVedtakUrl: faker.helpers.arrayElement([
            {
                dato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
                id: faker.word.sample(),
                url: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        paaklagetVedtakRefs: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
            faker.word.sample()
        ),
        status: faker.helpers.arrayElement([
            "SENDT",
            "MOTTATT",
            "UNDER_BEHANDLING",
            "FERDIG_BEHANDLET",
            "HOS_STATSFORVALTER",
        ] as const),
        ...overrideResponse,
    }));

export const getSendKlageResponseMock = (): Unit => ({});

export const getHentKlagerMockHandler = (overrideResponse?: KlageDto[]) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/klage", async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getHentKlagerResponseMock()), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });
    });
};

export const getSendKlageMockHandler = (overrideResponse?: Unit) => {
    return http.post("*/api/v1/innsyn/:fiksDigisosId/klage", async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getSendKlageResponseMock()), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });
    });
};
export const getKlageControllerMock = () => [getHentKlagerMockHandler(), getSendKlageMockHandler()];
