/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {faker} from "@faker-js/faker";
import {HttpResponse, delay, http} from "msw";
import type {KlageDto, Unit} from ".././model";

export const getHentKlagerResponseMock = (): KlageDto[] =>
    Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        klageUrl: {
            dato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
            id: faker.word.sample(),
            url: faker.word.sample(),
        },
        nyttVedtakUrl: faker.helpers.arrayElement([
            {
                dato: faker.helpers.arrayElement([faker.date.past().toISOString().split("T")[0], undefined]),
                id: faker.word.sample(),
                url: faker.word.sample(),
            },
            undefined,
        ]),
        paaklagetVedtakRefs: Array.from({length: faker.number.int({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
            faker.word.sample()
        ),
        status: faker.helpers.arrayElement([
            "SENDT",
            "MOTTATT",
            "UNDER_BEHANDLING",
            "FERDIG_BEHANDLET",
            "HOS_STATSFORVALTER",
        ] as const),
    }));

export const getSendKlageResponseMock = (): Unit => ({});

export const getHentKlagerMockHandler = (
    overrideResponse?:
        | KlageDto[]
        | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<KlageDto[]> | KlageDto[])
) => {
    return http.get("*/api/v1/innsyn/:fiksDigisosId/klage", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getHentKlagerResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};

export const getSendKlageMockHandler = (
    overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Unit> | Unit)
) => {
    return http.post("*/api/v1/innsyn/:fiksDigisosId/klage", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getSendKlageResponseMock()
            ),
            {status: 200, headers: {"Content-Type": "application/json"}}
        );
    });
};
export const getKlageControllerMock = () => [getHentKlagerMockHandler(), getSendKlageMockHandler()];
